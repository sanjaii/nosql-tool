#!/usr/bin/env ruby

require_relative '../config'
require_relative '../lib/database'
require_relative '../lib/parse_data'
require_relative '../lib/collection'
require_relative '../lib/record'
require_relative '../helper'

class CommandDoesNotExist < StandardError
  def initialize(message = 'Invalid usage, please go through the README.')
    super
  end
end

private

def database
  Database.new("#{Dir.pwd}/db.json")
end

def data
  @data ||= ParseDatabase.new(database).data unless database.empty?
end

def collections
  Collection.new(data)
end

def records(collection)
  Record.new(collection)
end

public

begin
  case ARGV[0]
  when 'new'
    Config.new(database.create).setup
  when 'collection'
    collections.create(ARGV[1])
    database.write(data)
  when 'create'
    collection = collections.find(ARGV[1])
    records(collection).create(ARGV[2..])
    database.write(data)
  when 'destroy'
    collection = collections.find(ARGV[1])
    records(collection).destroy(*ARGV[2..])
    database.write(data)
  when 'search'
    collection = collections.find(ARGV[1])
    result = records(collection).search(ARGV[2])
    logger.info(result.inspect)
  when 'select'
    collection = collections.find(ARGV[1])
    results = records(collection).select_records(ARGV[2..])
    logger.info(results.inspect)
  else
    raise CommandDoesNotExist
  end
rescue CollectionDoesNotExist, CommandDoesNotExist => e
  logger.error(e.message)
end
